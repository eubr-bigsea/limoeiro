### routers/_router.py
import logging
import typing
import datetime
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi import APIRouter, HTTPException, Depends, status

from ..schemas import (
    PaginatedResponse,
    DatabaseServiceTypeCreateRequestSchema,
    DatabaseServiceTypeUpdateRequestSchema,
    DatabaseServiceTypeItemResponseSchema,
    DatabaseServiceTypeListResponseSchema,
)
from ..models import DatabaseServiceType
from ..services.database_service_type_service import DatabaseServiceTypeService
from ..database import get_session

router = APIRouter()
log = logging.getLogger(__name__)
# region Protected\s*
# endregion\w*

@router.get("/database-service-types/{database_service_type_id}", tags=["DatabaseServiceType"],
    response_model=DatabaseServiceTypeItemResponseSchema)
async def get_database_service_type(database_service_type_id: int,
    db: AsyncSession = Depends(get_session)) -> DatabaseServiceTypeItemResponseSchema:
    """
    Retrieve a single instance of class DatabaseServiceType.

    :param database_service_type_id: The ID of the DatabaseServiceType instance to retrieve.
    :type database_service_type_id: int
    :return: A JSON object containing the DatabaseServiceType instance data.
    :rtype: dict
    """

    database_service_type = await DatabaseServiceTypeService(db).get(database_service_type_id)
    if database_service_type is None:
        raise HTTPException(status_code=404, detail="Item not found")
    return database_service_type

@router.get(
    "/database-service-types/",
    tags=["DatabaseServiceType"],
    response_model=typing.List[DatabaseServiceTypeListResponseSchema]
)
async def xfind_database_service_types(
    fields: str = None,
    only: str = None,
    sort: str = None,
    asc: bool = True,
    page: int = 1,
    page_size: int = 20,
    db: AsyncSession = Depends(get_session)
) -> PaginatedResponse[DatabaseServiceTypeListResponseSchema]:
    """
    Retrieve a list of instances of class DatabaseServiceType.

    :return: A JSON object containing the list of DatabaseServiceType instances data.
    :rtype: dict
    """
    return await DatabaseServiceTypeService(db).find(
        fields, only, sort, asc, page, page_size)
