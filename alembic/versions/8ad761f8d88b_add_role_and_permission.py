"""add_role_and_permission

Revision ID: 8ad761f8d88b
Revises: f4912149588a
Create Date: 2025-04-13 23:04:46.540708

"""

from typing import Sequence, Union
import uuid

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
from app.models import Role
from app.models import Permission
from app.models import User

# revision identifiers, used by Alembic.
revision: str = "8ad761f8d88b"
down_revision: Union[str, None] = "f4912149588a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tb_permission",
        sa.Column(
            "id", sa.String(length=100), autoincrement=False, nullable=False
        ),
        sa.Column("description", sa.String(100), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("applicable_to", sa.String(length=40), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tb_role_permission",
        sa.Column("role_id", sa.UUID(), nullable=False),
        sa.Column("tb_permission_id", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["tb_role.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tb_permission_id"],
            ["tb_permission.id"],
        ),
        sa.PrimaryKeyConstraint("role_id", "tb_permission_id"),
    )
    op.create_table(
        "tb_user_role",
        sa.Column("role_id", sa.UUID(), nullable=False),
        sa.Column("tb_user_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["tb_role.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tb_user_id"],
            ["tb_user.id"],
        ),
        sa.PrimaryKeyConstraint("role_id", "tb_user_id"),
    )
    op.add_column('tb_role', sa.Column('description', sa.String(length=100), nullable=True))
    op.add_column("tb_role", sa.Column("all_user", sa.Boolean(), nullable=False))
    op.add_column("tb_role", sa.Column("system", sa.Boolean(), nullable=False))
    op.alter_column(
        "tb_role",
        "name",
        existing_type=sa.VARCHAR(length=200),
        type_=sa.String(length=100),
        existing_nullable=False,
    )

    bind = op.get_bind()
    session = Session(bind=bind)

    # Add new roles: admin and everyone
    roles = [
        Role(
            id=uuid.UUID("00000000-0000-0000-0000-000000000001"),
            name="admin",
            description="Usuários administradores",
            all_user=False,
            system=True,
        ),
        Role(
            id=uuid.UUID("00000000-0000-0000-0000-000000000002"),
            name="everyone",
            description="Todos os usuários",
            all_user=True,
            system=True,
        ),
    ]
    session.add_all(roles)
    session.flush()

    # Add initial permissions
    permissions = [
        Permission(
            id="EDIT_USERS",
            description="Editar usuários",
            enabled=True,
            applicable_to="security",
        ),
        Permission(
            id="EDIT_ROLES",
            description="Editar papéis",
            enabled=True,
            applicable_to="security",
        ),
        Permission(
            id="EXPLORE_CATALOG",
            description="Explorar catálogo",
            enabled=True,
            applicable_to="catalog",
        ),
        Permission(
            id="EDIT_CONNECTION",
            description="Editar conexões",
            enabled=True,
            applicable_to="catalog",
        ),
        Permission(
            id="EDIT_INGESTION",
            description="Editar ingestões",
            enabled=True,
            applicable_to="catalog",
        ),
        Permission(
            id="VIEW_CONNECTION",
            description="Visualizar conexões",
            enabled=True,
            applicable_to="catalog",
        ),
        Permission(
            id="VIEW_INGESTION",
            description="Visualizar ingestões",
            enabled=True,
            applicable_to="catalog",
        ),
        Permission(
            id="START_INGESTION",
            description="Iniciar ingestões",
            enabled=True,
            applicable_to="catalog",
        ),
        Permission(
            id="CHANGE_CATALOG",
            description="Alterar catálogo",
            enabled=True,
            applicable_to="catalog",
        ),
        Permission(
            id="SEARCH_CATALOG",
            description="Pesquisar no catálogo",
            enabled=True,
            applicable_to="catalog",
        ),
        Permission(
            id="EDIT_DOMAINS",
            description="Editar domínios",
            enabled=True,
            applicable_to="dimension",
        ),
        Permission(
            id="EDIT_LAYERS",
            description="Editar camadas",
            enabled=True,
            applicable_to="dimension",
        ),
        Permission(
            id="EDIT_TAGS",
            description="Editar tags",
            enabled=True,
            applicable_to="dimension",
        ),
        Permission(
            id="EDIT_CONTACTS",
            description="Editar contatos",
            enabled=True,
            applicable_to="dimension",
        ),
        Permission(
            id="EDIT_ORGANIZATIONS",
            description="Editar organizações",
            enabled=True,
            applicable_to="dimension",
        ),
    ]

    session.add_all(permissions)

    # Add user admin and associate it with the admin role
    admin_user = User(
        id=uuid.UUID("00000000-0000-0000-0000-000000000001"),
        name="admin",
        login="admin@lemonade.org.br",
        deleted=False,
    )
    session.add(admin_user)
    roles[0].users.append(admin_user)
    session.add(roles[0])

    # session.execute(
    #     sa.text(
    #         "INSERT INTO tb_user_role (role_id, tb_user_id) VALUES (:role_id, :tb_user_id)"
    #     ),
    #     {"role_id": roles[0].id, "tb_user_id": admin_user.id},
    # )

    session.commit()
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "tb_role",
        "name",
        existing_type=sa.String(length=100),
        type_=sa.VARCHAR(length=200),
        existing_nullable=False,
    )
    op.drop_column("tb_role", "system")
    op.drop_column("tb_role", "all_user")
    op.drop_column("tb_role", "description")
    op.drop_table("tb_user_role")
    op.drop_table("tb_role_permission")
    op.drop_table("tb_permission")
    bind = op.get_bind()
    session = Session(bind=bind)

    # Delete roles created in upgrade
    session.execute(
        sa.text("DELETE FROM tb_role WHERE id IN (:admin_id, :everyone_id)"),
        {
            "admin_id": "00000000-0000-0000-0000-000000000001",
            "everyone_id": "00000000-0000-0000-0000-000000000002",
        },
    )
    session.execute(
        sa.text("DELETE FROM tb_user WHERE id IN (:admin_id)"),
        {
            "admin_id": "00000000-0000-0000-0000-000000000001",
        },
    )

    session.commit()
    # ### end Alembic commands ###
